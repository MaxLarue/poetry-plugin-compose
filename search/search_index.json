{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poetry compose A poetry plugin to manage multiple project from a single root, a-la monorepo Work in progress This is a work in progress, you might find some bugs, some improvements and some annoyance. Do not hesitate to report them through github issues. Getting started Install plugin poetry self add poetry-plugin-compose Start linting all sub projects in a single line poetry compose run flake8 . or running pytest in every package that has it installed poetry compose run -i pytest -- pytest -vvv Project layout Poetry compose is intended to run in a flat setup where each subdirectory that contains a pyproject.toml file is considered a sub-project. Such as database __init__.py pyproject.toml database __init__.py tests __init__.py users __init__.py pyproject.toml users __init__.py tests __init__.py profiles __init__.py pyproject.toml profiles __init__.py tests __init__.py posts __init__.py pyproject.toml posts __init__.py tests __init__.py scripts run.sh but poetry will recursively descend into every subdirectory, so you could have other setups such as packages database __init__.py pyproject.toml database __init__.py tests __init__.py users __init__.py pyproject.toml users __init__.py tests __init__.py profiles __init__.py pyproject.toml profiles __init__.py tests __init__.py posts __init__.py pyproject.toml posts __init__.py tests __init__.py scripts run.sh Dependencies poetry compose supports finding dependency order of your packages and always compose commands in a valid order. poetry compose does not support circular dependencies though, and you should avoid them between your packages. You can find the computed dependency order using the following command: poetry compose dependency-order Linking two packages the easiest way to link two sub packages is to cd into the dependent one and run the followng command: cd profiles poetry add -e ../users local development The recommended way to run plugin as you develop them is to install them in editable mode through poetry's packaged pip executable. Example: /Users/macbook/Library/\"Application Support\"/pypoetry/venv/bin/pip install -e ../poetry_multi_package Documentation Documentation is mostly generated from the command themselves. Also the root readme of the project servers as the welcome page of the docs. In order to sync the doc runs the following cd scripts poetry run python generate_docs.py","title":"Home"},{"location":"#poetry-compose","text":"A poetry plugin to manage multiple project from a single root, a-la monorepo","title":"Poetry compose"},{"location":"#work-in-progress","text":"This is a work in progress, you might find some bugs, some improvements and some annoyance. Do not hesitate to report them through github issues.","title":"Work in progress"},{"location":"#getting-started","text":"Install plugin poetry self add poetry-plugin-compose Start linting all sub projects in a single line poetry compose run flake8 . or running pytest in every package that has it installed poetry compose run -i pytest -- pytest -vvv","title":"Getting started"},{"location":"#project-layout","text":"Poetry compose is intended to run in a flat setup where each subdirectory that contains a pyproject.toml file is considered a sub-project. Such as database __init__.py pyproject.toml database __init__.py tests __init__.py users __init__.py pyproject.toml users __init__.py tests __init__.py profiles __init__.py pyproject.toml profiles __init__.py tests __init__.py posts __init__.py pyproject.toml posts __init__.py tests __init__.py scripts run.sh but poetry will recursively descend into every subdirectory, so you could have other setups such as packages database __init__.py pyproject.toml database __init__.py tests __init__.py users __init__.py pyproject.toml users __init__.py tests __init__.py profiles __init__.py pyproject.toml profiles __init__.py tests __init__.py posts __init__.py pyproject.toml posts __init__.py tests __init__.py scripts run.sh","title":"Project layout"},{"location":"#dependencies","text":"poetry compose supports finding dependency order of your packages and always compose commands in a valid order. poetry compose does not support circular dependencies though, and you should avoid them between your packages. You can find the computed dependency order using the following command: poetry compose dependency-order","title":"Dependencies"},{"location":"#linking-two-packages","text":"the easiest way to link two sub packages is to cd into the dependent one and run the followng command: cd profiles poetry add -e ../users","title":"Linking two packages"},{"location":"#local-development","text":"The recommended way to run plugin as you develop them is to install them in editable mode through poetry's packaged pip executable. Example: /Users/macbook/Library/\"Application Support\"/pypoetry/venv/bin/pip install -e ../poetry_multi_package","title":"local development"},{"location":"#documentation","text":"Documentation is mostly generated from the command themselves. Also the root readme of the project servers as the welcome page of the docs. In order to sync the doc runs the following cd scripts poetry run python generate_docs.py","title":"Documentation"},{"location":"commands/","text":"Commands install Run install in multiple sub-packages usage: poetry compose install [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose install [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run install in multiple sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry install in every sub-package poetry compose install run poetry install in the integration_test package poetry compose install -d integration_test -- add Add a dependency to every sub-packages usage: poetry compose add [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose add [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Add a dependency to every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: add flake8 to every sub-packages poetry compose add flake8 add flake8 to every subpackage where black is installed poetry compose install -i black -- flake8 add flake8 as a dev dependency to every subpackage where black is installed poetry compose install -i black -- flake8 --group-dev build Build sub packages usage: poetry compose build [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose build [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Build sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry build in every sub-package poetry compose build run poetry build in the integration_test package poetry compose build -d integration_test -- check Run poetry check in sub-packages usage: poetry compose check [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose check [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run poetry check in sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry check in every sub-package poetry compose check run poetry check in the integration_test package poetry compose check -d integration_test -- lock Lock sub packages usage: poetry compose lock [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose lock [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Lock sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry lock in every sub-package poetry compose lock run poetry lock in the integration_test package poetry compose lock -d integration_test -- publish Publish sub packages usage: poetry compose publish [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose publish [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Publish sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry publish in every sub-package poetry compose publish run poetry publish in the integration_test package poetry compose publish -d integration_test -- remove Removes a dependency from every sub-packages usage: poetry compose remove [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose remove [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Removes a dependency from every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: remove flake8 from every sub-packages poetry compose remove flake8 remove flake8 from every subpackage where black is installed poetry compose install -i black -- flake8 remove flake8 as a dev dependency from every subpackage where black is installed poetry compose install -i black -- flake8 --group-dev update Updates dependencies in every sub-packages usage: poetry compose update [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose update [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Updates dependencies in every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry update in every sub-package poetry compose update run poetry update in the integration_test package poetry compose update -d integration_test -- run Run multiple commands in parallel usage: poetry compose run [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose run [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run multiple commands in parallel optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: run poetry run pytest in every sub-package poetry compose run pytest run pytest in every sub-package where it is installed poetry compose run -i pytest -- pytest -s dependency-order Find dependency order between packages usage: poetry compose dependency-order [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose dependency-order [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Find dependency order between packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory Examples: get a valid dependency order of every sub package poetry compose dependency-order","title":"Commands"},{"location":"commands/#commands","text":"","title":"Commands"},{"location":"commands/#install","text":"Run install in multiple sub-packages usage: poetry compose install [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose install [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run install in multiple sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"install"},{"location":"commands/#examples","text":"run poetry install in every sub-package poetry compose install run poetry install in the integration_test package poetry compose install -d integration_test --","title":"Examples:"},{"location":"commands/#add","text":"Add a dependency to every sub-packages usage: poetry compose add [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose add [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Add a dependency to every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"add"},{"location":"commands/#examples_1","text":"add flake8 to every sub-packages poetry compose add flake8 add flake8 to every subpackage where black is installed poetry compose install -i black -- flake8 add flake8 as a dev dependency to every subpackage where black is installed poetry compose install -i black -- flake8 --group-dev","title":"Examples:"},{"location":"commands/#build","text":"Build sub packages usage: poetry compose build [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose build [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Build sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"build"},{"location":"commands/#examples_2","text":"run poetry build in every sub-package poetry compose build run poetry build in the integration_test package poetry compose build -d integration_test --","title":"Examples:"},{"location":"commands/#check","text":"Run poetry check in sub-packages usage: poetry compose check [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose check [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run poetry check in sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"check"},{"location":"commands/#examples_3","text":"run poetry check in every sub-package poetry compose check run poetry check in the integration_test package poetry compose check -d integration_test --","title":"Examples:"},{"location":"commands/#lock","text":"Lock sub packages usage: poetry compose lock [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose lock [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Lock sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"lock"},{"location":"commands/#examples_4","text":"run poetry lock in every sub-package poetry compose lock run poetry lock in the integration_test package poetry compose lock -d integration_test --","title":"Examples:"},{"location":"commands/#publish","text":"Publish sub packages usage: poetry compose publish [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose publish [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Publish sub packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"publish"},{"location":"commands/#examples_5","text":"run poetry publish in every sub-package poetry compose publish run poetry publish in the integration_test package poetry compose publish -d integration_test --","title":"Examples:"},{"location":"commands/#remove","text":"Removes a dependency from every sub-packages usage: poetry compose remove [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose remove [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Removes a dependency from every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"remove"},{"location":"commands/#examples_6","text":"remove flake8 from every sub-packages poetry compose remove flake8 remove flake8 from every subpackage where black is installed poetry compose install -i black -- flake8 remove flake8 as a dev dependency from every subpackage where black is installed poetry compose install -i black -- flake8 --group-dev","title":"Examples:"},{"location":"commands/#update","text":"Updates dependencies in every sub-packages usage: poetry compose update [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose update [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Updates dependencies in every sub-packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"update"},{"location":"commands/#examples_7","text":"run poetry update in every sub-package poetry compose update run poetry update in the integration_test package poetry compose update -d integration_test --","title":"Examples:"},{"location":"commands/#run","text":"Run multiple commands in parallel usage: poetry compose run [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose run [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Run multiple commands in parallel optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"run"},{"location":"commands/#examples_8","text":"run poetry run pytest in every sub-package poetry compose run pytest run pytest in every sub-package where it is installed poetry compose run -i pytest -- pytest -s","title":"Examples:"},{"location":"commands/#dependency-order","text":"Find dependency order between packages usage: poetry compose dependency-order [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] usage: poetry compose dependency-order [-h] [-i IGNORE_MISSING] [-c CONTAINS] [-d DIRECTORY] Find dependency order between packages optional arguments: -h, --help show this help message and exit -i IGNORE_MISSING, --ignore-missing IGNORE_MISSING Only run in packages that have this dependency -c CONTAINS, --contains CONTAINS Only run in packages that include this file -d DIRECTORY, --directory DIRECTORY Only run in selected directory","title":"dependency-order"},{"location":"commands/#examples_9","text":"get a valid dependency order of every sub package poetry compose dependency-order","title":"Examples:"}]}